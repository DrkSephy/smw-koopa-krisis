Long-Term Goals
---------------

1. Create an overworld for level selection. [David/Jorge]

   - In progress.

2. Figure out how to traverse to different sub-rooms in a level using only one level change entity.
   i.e: There can be several doors in a level, and a player can enter them by pressing UP, and 
   travel back and forth through these maps. This feature is high priority, since it removes 
   linearity in the game. [Jonathan] 

   - COMPLETED. 

3. Possibly adding a "climb ladder" feature.


To-do (September 20, 2013)
--------------------------

1. Stalker AI [ Kevin ]
    
    - COMPLETED.

2. Ninji AI [ Kim ]

    - COMPLETED.

3. Ledge Detection / Simple walking AI / Graphics upgrade [ David ]

    - COMPLETED. 

To-do (September 27, 2013)
--------------------------

1. Heads Up Display (HUD) upgrade [ David ]

   - Replace current display of lives. Instead of displaying this.lives using a loop counter, replace
     the entire life counter with simply a Mario head x # lives.
   - Add a coin counter. Could be either a graphic of a coin, with the number of coins next to it. 
     Another approach could be to simply spell out "coins". (Not sure which method looks better).
   - Add an "Item" box to the center of the hud. Based on the weapon currently held by the player, 
     draw the corresponding power-up images.

     - COMPLETED.

2. Kill block [ Kim ]

    - Currently, there is no way to kill an entity that falls into a bottomless pit/lava. This
      Entity will be placed under lava/pits to kill any entity that makes contact with it. For
      reference, look at how to create a box using only weltmesiter (from levelexit.js). The
      collision properties will have to be changed to check against both A and B type entities,
      and in the collidesWith() method, just call this.kill() whenever an entity collides with the
      kill block.

    - COMPLETED. 

3. Thwomp AI [ Kim ]

    - The behavior of this enemy is located in lib/game/entities/thwomp.js.
      NOTE: The graphics for this enemy are -slightly- off. This is minor, will be fixed eventually.

    - COMPLETED.

4. Bullet Shooter [ Kevin ]

     - Behavior: The shooter itself will only fire if the player is a certain distance away from it.
       It will not shoot if the player is very close to it. The entity that is spawned from the 
       Bullet Shooter is the Bullet Bill entity.
       NOTE: The bullet bills go through all obstacles, and only collide with the player.

    - COMPLETED.

5. Bird (Needs a cooler name) [ Jorge ]

     - COMPLETED.

6. Jumping while moving forward AI [ Kevin ]

     - COMPLETED.

To-do (October 4th, 2013 -> October 18th, 2013)
-----------------------------------------------

1. Boo Enemy [ Jorge ]

    - Stalks player when the player is not facing the boo. If the player is facing the boo, the boo will not follow.

    - COMPLETED.

2. Hammer Brothers [ Kevin ]

    - Shoots hammers periodically. 

    - COMPLETED.

3. Fire Brothers [ Kim ]

    - Shoots a series of fireballs (spread out over time), then has a cool down, then begins to fire again. 
      The graphics file to use is firebros.png. (Note: size is 24 x 24).

4. Bony Beetle [ Kevin ]

    Graphics file: new_bony_beetle.png
    Note: Size of each frame is 30 x 30.

    Behavior
    --------
    1. Plays walking frame. 
    2. If the player is getting close to it, it will transition into its spiky state.
    3. In the spiky state, if the player jumps on it then they take damage.
    4. After a few seconds, reverts to walking. 
    5. If the player jumps on it when this enemy is not spiky, it will turn into bones and regenerate after
       a few seconds.

    - COMPLETED.

5. Skeleton [ Kim ] 

    Graphics file: skeleton.png
    Note: Size of each frame is 33 x 26. 

    Behavior
    --------
    1. Walks back and forth (it does not fall off ledges, see ledge detection code).
    2. If the player jumps on it, it turns into bones.
    3. After a few seconds, it regenerates to it's normal form.

6. Fixing multiple music bug [ Jonathan ]

    - With the addition of a new "door" entity, we have lost our functionality of having different songs for
      different levels. The reason for this is that the director.js's loadlevel() method is being 
      overridded by the loadLevel() method in door.js (I think).


****************************
* List of new things to do *
****************************
As stated in my recent e-mail, if you would like to take up any of the following things, feel free to do so by 
including your name next to the task.

1. Overworld [ David / ??? ]
    
    Notes: After tinkering around with this, I'm not sure of a good way to do this. Currently, the overworld
           is a level itself which is loaded in a new "game" instance, OverWorld. I thought that by using 
           an entity on the overworld itself to load a level, it would work (unfortunately it does not). 
           After testing with including all of the director code in the OverWorld game instance, I am 
           able to load levels (although this method seems improper). I'm starting to wonder if we even
           need the director plugin anymore, as it is unclear to me exactly how levels are being loaded
           (since director has it's own loadLevel() method, which overrides ImpactJS's loadLevel() method,
           which both are then overrided again by the door.js's loadLevel() method, argh!). I will probably 
           experiment a bit more with this, but any and all ideas/attempts are welcome.

    More Notes: For reference, the reason why I used a seperate game instance for this specific level 
                is because it requires a different player sprite/controls.

2. A powerup system [ David ]

    A much needed (major) improvement. As you are aware due to programming AI, no matter how difficult the 
    enemy is, it can be defeated by having powerups at the start(espeically the hammmer). The proposed replacement system   
    for powerups is as follows:

    1. Remove all "weapons" (that is a direct reference to the source code, where powers are defined as weapons).
       (This includes removing the code that allows you to TAB through weapons, since the player cannot carry
       more than one powerup).
    2. Use the question mark block provided (questionmark_block.png) to create an entity named (Itemblock) which
       can spawn a variety of items when hit from -below-. These items include: [Mushroom, Green Mushroom,                 
       Hammer Suit, Fire Flower, X number of Coins]. The behavior of the items are as follows:

        2a. The Mushroom powerup will move randomly in either the right or left direction after being spawned, 
            so that the player has to chase it to grab it. This powerup restores 10 health points. 
            (See healthpotion.js for a code reference).

        2b. The Green Mushroom has the same behavior as the Mushroom, except that it gives the player one 
            extra life. (this.lives += 1).

        2c. The Fire Flower will give the player the ability to throw fireballs.

        2d. Ahh, the fun hammer suit. This power gives the player to destroy...the ability to throw hammers.
            
    3. The Item Blocks will have to be coded similar to the door, where you can enter a key-value pair to
       set which item comes out when hit (or else you'll have to make 4 seperate entities). 

    4. When the player picks up a power, they will now gain the ability to shoot that entity. 

    5. If the player is hit, take away the powerup. Now, the only way the player can damage enemies is by jumping 
       on them.

    
    Note: I've already included all of the necessary graphics for all of the above entities.

    
    - COMPLETED.


3. A way to pause / unpause the game. [ Kevin ]

    - COMPLETED.

4. Using pipes to transition to levels (instead of the door graphic). [ NOT TAKEN UP YET ]

    It was mentioned before that we should add pipes to transition between levels. To do this, 
    we can simply use the new pipes graphics that I have inserted (pipes.png, size is 32 x 32)
    and use the door.js entity to handle the transitions. It would be nice to have some sort of
    animation of actually entering the pipe.



*******************************
* Enemy Bug fixing / tweaking *   
*******************************

Currently, almost every enemy will damage the player if jumped on. Now that we have a substantial number of enemies to design 
levels with, it's time that we get this fixed. 

1. Go through each enemy and alter its collison code so that it does not damage the player if jumped on.
   Note: If the enemy is spiky, it should damage the player if jumped on.

    - [ Kevin ]


2. Also, go through each enemy and alter its collision code so that it cannot be killed from below. 
   Note: See the jumping_ninji entity's collidesWith method. It does not die from below.

    - [ Kevin ]



Also, all enemies are set to do X amount of damage to the player if they collide. It would be great if someone could go through
each enemy and adjust the damage levels to be a little more varying (currently, everything does 2 or 3 damage to the player,
while things like the bird.js's bombs will kill the player instantly). This feature isn't a priority, but it is certainly 
needed for proper game balance and consistentcy (for example: all normal koopa's should do 2 damage, and all flying koopa's
do 3 damage, ghosts can do 4, etc) and lastly, it's another task to do.

    - [ NOT TAKEN UP YET ]



  
***********************
* Feature Inspiration *
***********************

A while back, I stumbled upon this amazing extension of ImpactJS: http://collinhover.github.io/impactplusplus/
There are a number of features, some of which include methods to make buttons, text, and UI elements, abstractions for 
creating upgrades and abilities (as well as enemy AI's), and a bunch of other things. My favorite feature is located in
this demo:     http://coldspace.henklein.com/plugin_demo/
The above link shows how to make a level very dark and shadowy (Of course this would be my favorite one), although it seems
that this isn't a feature you can turn on only for a single level without some hacks. It would be great to have the shadow
casting atmosphere for a castle level.

Anyways, I don't have any experience with using Impactplusplus, but if anyone finds a feature they'd like to implement from it, go right ahead. 
The documentation seems to be pretty good, although at times it is unclear exactly how to integrate the impactplusplus code with ImpactJS.
Some notable things to check out for the future:

  1. The shadow casting code.
  2. The methods for creating UI elements. Eventually we'll be building GUI's.
  3. Perhaps the methods for enemies, might lead to even more creative AI's using Astar pathfinding methods.


***************
* New Enemies *
***************

1. Bowser Statue [ NOT TAKEN YET ]

   - Graphics file: media/enemies/bowser_statue.png   Size: 24 x 24.
   - Behavior: Completely stationary. It spawns a flame periodically. (Flame graphic is located in enemies/flame.png.
     Note: The flame goes through all objects and only collides with the player.

2. Swooper [ NOT TAKEN YET ]

   - Graphics file: media/enemies/swooper.png         Frame sizes: 16 x 16
   - Behavior: The swooper is initally positioned hanging on the ceiling. As the player is approaching, it attempts
               to swoop down and collide with the player. If it misses, it simply keeps moving left. Frame [2] is 
               the idle state, while frames [1], [0] are the swooping animations. For a visual aid on how it works,
               check out this video: http://www.youtube.com/watch?v=Dtm9ZGcHQho
     Note: To bypass having to calculate angles for the attack, it's probably best if you target the player from as wide
     as a range as possibly, taking in mind the actual range at which an enemy will be spawned by the enemy_spawner
    entity. 

3. Pink Muncher [ NOT TAKEN YET ] 

    - Graphics file: media/enemies/pink_muncher.png  Frame sizes: 16 x 16
    - Behavior: 
              1. Detects the player.
              2. If player is not close to it (you can determine what is "too close"), it plays frames [0], [1].
              3. If the player is getting close, it starts to jump up a few pixels (playing frame [2],[3]) and
                 repeatedly jumps back up everytime it lands.
              Note: The purpose of this enemy is to jump up and try to hit the player from below as they try to
                    jump over it. It's up to the programmer to decide how high is enough, but note that the point
                    of this enemy is to make the player be cautious of how high they jump (otherwise they'll get
                    hit). 
              4. If the player is not "close", revert back to it's first two frames. 


